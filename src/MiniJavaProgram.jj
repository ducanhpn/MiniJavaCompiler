PARSER_BEGIN(MiniJavaProgram)
public class MiniJavaProgram {

    public static GlobalKlasse globaleList;
    public static JavaClassFileGenerator abc = new JavaClassFileGenerator("ProgramFromGenerator",true,true,true);

    public static void main(String args[]){
        MiniJavaProgram parser = new MiniJavaProgram(System.in);
        try{
            globaleList.setFunction("main");
            parser.start();
        }catch(Exception e){
            System.out.println(e);
        }

        MethodObject[] objs = new MethodObject[globaleList.objectsList.size()];
        objs = globaleList.objectsList.toArray(objs);
        abc.generateClassFile(objs);
    }


}


PARSER_END(MiniJavaProgram)

SKIP:{
 "\r"|"\n"|"\t"|" "
}
TOKEN : {
<NUMBER : ["1"-"9"] (["0"-"9"])* | "0">
|
<MAL : "*">
|
<GETEILT : "/">
|
<PLUS : "+">
|
<MINUS : "-">
|
<FINAL : "final">
|
<INT : "int">
|
<FUNC: "func">
|
<VOID: "void">
|
<WHILE : "while">
|
<IF : "if">
|
<PRINT : "print">
|
<ELSE : "else">
|
<RETURN : "return">
|
<IDENT : ["a"-"z"](["a"-"z","A"-"Z","0"-"9"])*>
|
<COMPOP : "=="|"!="|"<"|"<="|">"|">=">
}

void start() throws LWertException,RWertException,ConstantAlreadyException,SymbolAlreadyDefinedException, UnknowSymbolException:{String str="";}{
str=programm()

{str+="b1";}
{
    globaleList.getFunction("main").paraNum = 0;
    globaleList.getFunction("main").byteCode = str;
    globaleList.createSymbolTabelle();
}
<EOF>
{
//str =str.replaceAll("(?:\\w{2})","$0 ");
System.out.println(str);}
}

String programm() throws RWertException,LWertException,RWertException,ConstantAlreadyException, SymbolAlreadyDefinedException, UnknowSymbolException:{String str1=""; String str2="";String str3=""; String funcStr="";String procStr="";}{
 str1=constDecl("main") str2=varDecl("main",1) procStr=procList() funcStr=funcList() str3=statement("main")
 {
return str1+str2+str3;}
}
String procList() throws LWertException,RWertException,ConstantAlreadyException, SymbolAlreadyDefinedException, UnknowSymbolException: {String procStr=""; String listStr="";}{
    (procStr=procedure() listStr=procList() )?
{
    return procStr + listStr;
}
}
String funcList() throws LWertException,RWertException,ConstantAlreadyException, SymbolAlreadyDefinedException, UnknowSymbolException: {String funcStr=""; String listStr="";}{
    (funcStr=function() listStr=funcList() )?
    {

    return funcStr + listStr;
}
}

//const declaration
String constDecl(String functionName) throws ConstantAlreadyException:{String ret="";}{
(<FINAL> <INT> ret=constZuw(functionName) constList(functionName) ";")?
{return ret;}
}

String constZuw(String functionName) throws ConstantAlreadyException:{Token t1=null; Token t2=null;}{
t1 = <IDENT> "=" t2 = <NUMBER>
    {
    globaleList.getFunction(functionName).addConstant(t1.image, t2.image);
    if(functionName.equals("main")) return "";
    return "";
    }
}

void constList(String functionName) throws ConstantAlreadyException:{}{
("," constZuw(functionName) constList(functionName))?
}

//variable declaration
String varDecl(String functionName, int i) throws SymbolAlreadyDefinedException:{Token varName=null; String str1=""; String str2="";}{

(<INT> varName=<IDENT> str1=varZuw(functionName, varName,i) str2=varList(functionName, i+1) ";")?
{

return str1+str2;}
}

String varZuw(String functionName, Token varName,int index) throws SymbolAlreadyDefinedException:{Token value=null; String str="";}{
("=" value=<NUMBER> )?
{
int i;
if(value==null) i=0 ;
else i = Integer.parseInt(value.image);
//add variable
globaleList.getFunction(functionName).addVariable(varName.image, String.valueOf(index));
if(i <= 15) {str= "100" + Integer.toHexString(i);}
else if(i <=255) str = "10" + Integer.toHexString(i);
else if(i <= 4095) str = "110" + Integer.toHexString(i);
else str="11" + Integer.toHexString(i);
str += "36";
if(index <= 15) str+= "0"+index;
else str += index;
return str;
}
}

String varList(String functionName, int i) throws SymbolAlreadyDefinedException:{Token varName=null; String str1=""; String str2="";}{
("," varName=<IDENT> str1=varZuw(functionName, varName,i) str2=varList(functionName, i+1))?
{
return str1+str2;}
}

String expression(String functionName) throws  UnknowSymbolException,RWertException:{String strTerm=""; String strSumme="";}{
 strTerm=term(functionName) strSumme=summe(functionName)
    {return strTerm+strSumme;}
}

String summe(String functionName) throws UnknowSymbolException,RWertException:{String strTerm=""; String strSumme="";Token plusToken=null; Token minusToken=null;}{
((plusToken=<PLUS>|minusToken=<MINUS>) strTerm=term(functionName) strSumme=summe(functionName))?
{
    if(plusToken != null){
        strTerm= strTerm+"60"+strSumme;
    }
    if(minusToken!=null){
        strTerm= strTerm+"64"+strSumme;
    }
}
{return strTerm;}
}

String term(String functionName) throws UnknowSymbolException,RWertException:{String strFaktor=""; String strProduct="";}{
 strFaktor=faktor(functionName)  strProduct=product(functionName)
 {
    return strFaktor+strProduct;
}
}

String product(String functionName) throws UnknowSymbolException,RWertException:{Token malToken=null; Token geteiltToken=null; String strFaktor=""; String strProduct="";}{
((malToken=<MAL>|geteiltToken=<GETEILT>) strFaktor=faktor(functionName) strProduct=product(functionName))?
{
    if(malToken!= null) strFaktor=strFaktor+"68"+strProduct;
    if(geteiltToken !=null) strFaktor= strFaktor+"6c"+strProduct;
}
{return strFaktor;}
}

String faktor(String functionName) throws UnknowSymbolException,RWertException:{Token num=null; Token ident=null; String exp =""; String str="";int i=0;String tmp=""; Token check=null;}{
 num=<NUMBER>
 {
    i = Integer.parseInt(num.image);
    // print bytecode
     if(i <= 15) str= "100" + Integer.toHexString(i);
     else if(i <=255) str = "10" + Integer.toHexString(i);
     else if(i <= 4095) str = "110" + Integer.toHexString(i);
     else str="11" + Integer.toHexString(i);
     return str;
}
| ident=<IDENT> (check="(" tmp=functionCall(functionName))?
{
if(check == null){ // Es handelt sich um einen Variablenamen oder Konstantnamen
    if(globaleList.getFunction(functionName).tabelle.containsKey(ident.image) && !functionName.equals("main")){ // Das Symbol ist in der Symboltabelle der Funktion
        //Go, let find in this function
        if(globaleList.getFunction(functionName).variableNames.contains(ident.image)){//Variable
            //print byte code
            i = Integer.parseInt(globaleList.getSymbol(functionName,ident.image));
            if( i<=15) str="150"+ Integer.toHexString(i);
            else str = "15"+Integer.toHexString(i);
        }
        else{//Konstant
            //print byte code
            i=Integer.parseInt(globaleList.getSymbol(functionName,ident.image));
            if( i<=15) str="100"+ Integer.toHexString(i);
            else str = "10"+Integer.toHexString(i);
        }
    }
    else if(globaleList.getFunction("main").tabelle.containsKey(ident.image)){ // find in main
        if(globaleList.getFunction("main").variableNames.contains(ident.image)){//variable
            //print byte code
            i = Integer.parseInt(globaleList.getSymbol(functionName,ident.image));
            if( i<=15) str="150"+ Integer.toHexString(i);
            else str = "15"+Integer.toHexString(i);
        }
        else{//konstant
            //print byte code
            i=Integer.parseInt(globaleList.getSymbol("main",ident.image));
            if( i<=15) str="100"+ Integer.toHexString(i);
            else str = "10"+Integer.toHexString(i);
        }
    }
    else{
        throw new RWertException("Constant or Variable doesn't exist");
    }
    return str;
}
else{
    if(globaleList.functionList.containsKey(ident.image)){

        exp = "b8(".concat( ident.image+")");
        return tmp + exp;
    }
    else{
        throw new RWertException("This function name doesn't exist");
    }
}

}
| "(" (exp=expression(functionName)) ")"
{return exp;}
}

String condition(String functionName) throws LWertException,RWertException,UnknowSymbolException:{String exp1=""; String exp2=""; Token vergleichToken=null; String ret="";}{
    exp1=expression(functionName) vergleichToken=<COMPOP> exp2=expression(functionName)
    {
    //Hier ist die Java Code. Hier wird eine Bytecode String erstellt und der String wird genau an den Opcode für If beendet. Die String Länge wird danach gemessen
    //indem wir die String Länge durch 2 geteilt. Hier entscheiden wir nur, welche Bytecode mit der Opcode passt.
        ret += exp1;
        ret += exp2;
        String op = vergleichToken.image;
        switch(op){
            case "==": ret += "a0";  break;
            case "<=": ret += "a3"; break;
            case "<": ret += "a2"; break;
            case ">": ret += "a4"; break;
            case ">=": ret += "a1"; break;
            case "!=": ret += "9f"; break;
            default: return "";
        }
        return ret;
    }
}

String statement(String functionName) throws LWertException,RWertException,UnknowSymbolException:{String temp=""; String stm = ""; String condStr = ""; String ret="";Token token=null;}{
token=<IDENT> ("(" ret=procCall(functionName) | "=" temp=expression(functionName) )  ";"

{
    if(!temp.equals("")){ // Zuweisung
        ret = temp;
        temp = token.image; // change temp to variable name
        if(globaleList.getFunction(functionName).tabelle.containsKey(temp) || globaleList.getFunction("main").tabelle.containsKey(temp)){
            ret += "36";
            int i = Integer.parseInt(globaleList.getSymbol(functionName, temp));

            if(i <= 15) ret+= "0"+Integer.toHexString(i);
            else ret += Integer.toHexString(i);
            return ret;
        }
        else{
            throw new LWertException("variable doesn't exist");
        }
    }
    else{
        return ret+"b8(" + token.image +")";
    }
}
|
"print" "(" (temp=expression(functionName)) ")" ";" { return temp+"b8(print)";}
|
"{" ret=stmtList(functionName) "}"
{return ret;}
|
"if" condStr=condition(functionName) stm=statement(functionName)
{
    int i = (6+stm.length()+6) /2;
    if(i <= 15) condStr+= "000" + Integer.toHexString(i);
    else if(i <=255) condStr += "00" + Integer.toHexString(i);
    else if(i <= 4095) condStr += "0" + Integer.toHexString(i);
    else condStr+= Integer.toHexString(i);
    ret = condStr+stm+"a7";
}
stm=optElse(functionName)
{
    i=(6+ stm.length()) / 2;
    if(i <= 15) ret+= "000" + Integer.toHexString(i);
    else if(i <=255) ret += "00" + Integer.toHexString(i);
    else if(i <= 4095) ret += "0" + Integer.toHexString(i);
    else ret+= Integer.toHexString(i);
    ret+= stm;
    return ret;
}
|
<WHILE> condStr=condition(functionName) stm=statement(functionName)
{
    i = stm.length() / 2 + 3 + 3;
    if(i <= 15) condStr+= "000" + Integer.toHexString(i);
    else if(i <=255) condStr += "00" + Integer.toHexString(i);
    else if(i <= 4095) condStr += "0" + Integer.toHexString(i);
    else condStr+= Integer.toHexString(i);

    int backward = 65535 - i;
    ret = condStr+stm+"a7";
    if(backward <= 15) ret+= "000" + Integer.toHexString(backward);
    else if(backward <=255) ret += "00" + Integer.toHexString(backward);
    else if(backward <= 4095) ret += "0" + Integer.toHexString(backward);
    else ret+= Integer.toHexString(backward);

    return ret;
}


}

String optElse(String functionName) throws LWertException,UnknowSymbolException,RWertException:{String ret="";}{
("else" ret=statement(functionName))?
{
    return ret;
}
}

String stmtList(String functionName) throws LWertException,UnknowSymbolException,RWertException:{String stm="";String list = "";}{
(stm=statement(functionName) list=stmtList(functionName))?
{
    return stm + list;
}
}

String functionCall(String functionName) throws UnknowSymbolException,RWertException:{String exp1=""; String exp2="";int paraCount=0;}{
 ( exp1=expression(functionName) exp2=expList(functionName) )? ")"
{
    return exp1+exp2;
}
}

String expList(String functionName) throws UnknowSymbolException,RWertException:{String exp1=""; String exp2="";}{
("," exp1=expression(functionName) exp2=expList(functionName) )?
{
    return exp1+exp2;
}
}

//procall
String procCall(String functionName) throws UnknowSymbolException,RWertException:{String exp1=""; String exp2="";}{
( ( exp1=expression(functionName) exp2=expList(functionName) )? ")")?
{
    return exp1+exp2;
}
}

// parameters
int routinenParameter(String functionName) throws SymbolAlreadyDefinedException:{int i=0; Token vName=null; int ret =i;}{
<INT> vName=<IDENT> {globaleList.getFunction(functionName).addVariable(vName.image,String.valueOf(i));i+=1; ret=i;} ret=parameterList(functionName, i)
{
System.out.println("How many parameter: " + ret);
return ret;
}
}

int parameterList(String functionName, int i) throws SymbolAlreadyDefinedException:{Token vName=null;int ret=i;}{
   ("," <INT> vName=<IDENT> {globaleList.getFunction(functionName).addVariable(vName.image,String.valueOf(i));i++;ret=i;} ret=parameterList(functionName, i))?
   {return ret;}
}

//function /procedure scope. constDecl & varDerDecl können schon leer sein
String routinenBlock(String functionName,int i) throws  LWertException,RWertException,ConstantAlreadyException, SymbolAlreadyDefinedException, UnknowSymbolException:{ String varStr="";String stm="";}{
    constDecl(functionName) varStr=varDecl(functionName, i) (stm=statement(functionName))?
{
    return varStr + stm;
}
}

// func def
String function() throws LWertException,RWertException,ConstantAlreadyException, SymbolAlreadyDefinedException, UnknowSymbolException:{String blockStr=""; String exp=""; int i=0; Token mName=null;}{
    <FUNC> mName=<IDENT> {globaleList.setFunction(mName.image);} "(" (i=routinenParameter(mName.image))?
{
    // set function parameter number
    globaleList.getFunction(mName.image).paraNum = i;
}
     ")" "{" blockStr=routinenBlock(mName.image, i) "return" exp=expression(mName.image) ";" "}"
{
    // store byte code
    globaleList.getFunction(mName.image).byteCode = blockStr + exp + "ac" ;
    System.out.println("function bytecode: " + mName.image + " : " + blockStr + exp + "ac");
    return blockStr + exp + "ac";
}
}
//procedure def
String procedure() throws LWertException,RWertException,ConstantAlreadyException, SymbolAlreadyDefinedException, UnknowSymbolException:{String blockStr="";int i=0; Token mName=null;}{
<VOID> mName=<IDENT>
{// add function to list
    globaleList.setFunction(mName.image);}
 "(" (routinenParameter(mName.image))?
{
    // set function parameter number
    globaleList.getFunction(mName.image).paraNum = i;
}
 ")" "{" blockStr=routinenBlock(mName.image,i) "}"

{
    // store byte code
    globaleList.getFunction(mName.image).byteCode = blockStr + "b1";
    return blockStr+"b1";
}
}






